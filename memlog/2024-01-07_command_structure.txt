DRONGO BOT COMMAND STRUCTURE DOCUMENTATION
========================================

1. Command Registration System
----------------------------
The bot uses a unique command registration system that differs from traditional Discord.py cogs. Instead of using the @commands.command() decorator in cog files, commands are registered through the register_commands.py utility.

Key Components:
- utilities/register_commands.py: Centralized command definition
- utilities/delete_commands.py: Utility to remove registered commands
- modules/: Individual command implementation files

2. Command Definition Process
---------------------------
A. Command Registration (register_commands.py)
   - Commands are defined in the get_commands() function
   - Each command is defined as a dictionary with:
     * name: Command name
     * description: Command description
     * options: Array of command options/parameters
     * Each option includes:
       - name: Parameter name
       - description: Parameter description
       - type: Discord API type (e.g., 6 for USER, 3 for STRING, 4 for INTEGER)
       - required: Boolean indicating if parameter is required

Example Command Definition:
```python
{
    "name": "wordcount",
    "description": "Counts how many times a user has said a word or phrase within this server.",
    "options": [
        {
            "name": "user",
            "description": "The user to check",
            "type": 6,
            "required": True 
        },
        {
            "name": "word",
            "description": "The word or phrase to count",
            "type": 3,
            "required": True 
        }
    ]
}
```

3. Command Implementation
------------------------
Commands are implemented in separate module files under the modules/ directory. Each module file:
- Contains the command logic
- Exports a setup() function
- Is imported and initialized in drongo.py

Example Module Structure (modules/wordcount.py):
```python
async def wordcount_command(ctx, user, word):
    # Command implementation
    pass

def setup(bot):
    # Register command handler
    bot.tree.command()(wordcount_command)
```

4. Command Loading Process
-------------------------
A. In drongo.py:
   1. Commands are loaded during bot initialization in setup_bot()
   2. Each module's setup() function is called
   3. Modules are imported and initialized:
      ```python
      message_stats.setup(self)
      message_management.setup(self)
      wordcount.setup(self)
      # etc...
      ```

5. Database Integration
----------------------
- Commands that need to persist data use the database.py module
- Database connections are managed using aiosqlite
- Each command can access the database through async functions defined in database.py

6. Command Implementation Approach
--------------------------------
The bot uses Discord's application commands system consistently across all modules:

A. App Commands Implementation:
   - Commands are centrally defined in register_commands.py
   - Implementation is in separate module files
   - Uses Discord's newer application commands system
   - All modules follow this pattern including:
     * wordcount.py
     * message_stats.py
     * clearchat.py
     * restart.py
     * and others

Benefits of the App Commands Approach:
- Centralized command registration in register_commands.py
- Consistent implementation pattern across all commands
- Better support for slash commands and interactions
- Easier management of command permissions and options
- Unified code structure for maintainability

7. Adding New Commands
---------------------
To add a new command:
1. Define the command in register_commands.py's get_commands() function
2. Create a new module file in modules/ directory
3. Implement the command logic in the module file
4. Add a setup() function to register the command handler
5. Import and initialize the module in drongo.py's setup_bot() method

8. Command Management
-------------------
- Commands can be bulk registered using register_commands.py
- Commands can be bulk deleted using delete_commands.py
- Each guild specified in DISCORD_GUILD_ID environment variable gets its own command set
- Global commands are supported but not currently used

9. Best Practices
----------------
- Keep command definitions centralized in register_commands.py
- Implement command logic in separate module files
- Use clear, descriptive names for commands and options
- Include helpful descriptions for commands and parameters
- Handle errors appropriately in command implementations
- Use the database for persistent data storage
- Follow existing patterns when adding new commands

This structure provides a clean, maintainable way to manage Discord bot commands while keeping concerns separated and organized.

10. Command Implementations
-------------------------
Here's a breakdown of each command implementation in the modules/ directory:

A. Achievement Commands (achievement_commands.py)
   - Command: /achievements
   - Description: Shows user's earned achievements and progress
   - Implementation: Uses bot.achievement_system to track and display achievements
   - Features: Shows total achievements, earned achievements, and remaining count

B. Clear Chat (clearchat.py)
   - Command: /clearchat
   - Description: Clears user's chat history with the bot
   - Implementation: Uses ai_handler to clear user-specific chat history
   - Features: Ephemeral response for privacy

C. Emoji Downloader (emoji_downloader.py)
   - Command: /download_emojis
   - Description: Downloads all server emojis and creates a zip file
   - Implementation: Uses aiohttp for downloads, provides progress updates
   - Features: Permission check (manage_emojis), progress tracking, zip file creation

D. Message Management (message_management.py)
   - Commands: 
     * /delete_messages: Deletes specified number of bot messages
     * /total_messages: Shows total messages in database
   - Implementation: Uses database connection for message counts
   - Features: Authorization checks, message deletion limits

E. Message Stats (message_stats.py)
   - Commands Group: /stats
     * /stats attachments: Counts user's attachments
     * /stats links: Counts user's posted links
   - Implementation: Uses app_commands.Group for command grouping
   - Features: Per-user statistics tracking

F. Restart (restart.py)
   - Command: /restart
   - Description: Restarts the bot and refreshes code
   - Implementation: Uses app_commands like other modules
   - Features: Authorization check, system executable restart

G. Version Tracker (version_tracker.py)
   - Not a command, but a system for tracking and announcing version changes
   - Features: Version comparison, AI-powered announcements, change tracking
   - Implementation: Uses version.json for version management

H. Web Link (web_link.py)
   - Command: /webstats
   - Description: Provides link to web statistics interface
   - Implementation: Gets server IP and returns web interface URL
   - Features: Cross-platform IP detection

I. Word Count (wordcount.py)
   - Command: /wordcount
   - Description: Counts word occurrences for a user
   - Implementation: Uses regex for accurate word matching
   - Features: 
     * Case-insensitive matching
     * Optional message instance viewing
     * File output for long results

J. Word Rank (wordrank.py)
   - Command: /wordrank
   - Description: Ranks users by word usage
   - Implementation: Uses database queries and sorting
   - Features:
     * Top 10 user ranking
     * Handles former/unknown members
     * Case-insensitive word matching

11. Implementation Patterns
--------------------------
Common patterns across command implementations:

A. Setup Function
   - All modules export a setup(bot) function
   - Used to register commands with the bot instance
   - Updates stats_display for command execution

B. Error Handling
   - Try/catch blocks for database operations
   - Proper error messages sent to users
   - Logging for debugging purposes

C. Database Integration
   - Consistent use of get_db_connection()
   - Connection cleanup in finally blocks
   - Parameterized queries for safety

D. Permission Management
   - Authorization checks where needed
   - Permission decorators for restricted commands
   - User-specific functionality

E. Response Patterns
   - Use of defer() for longer operations
   - Ephemeral responses when appropriate
   - Rich formatting for better readability

This detailed breakdown shows how each command follows the project's architectural patterns while implementing its specific functionality.
